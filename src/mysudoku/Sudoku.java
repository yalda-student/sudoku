/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mysudoku;

import java.awt.Color;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author yalda
 */
public class Sudoku extends javax.swing.JFrame {

    Scanner sc = new Scanner(System.in);

    /**
     * Creates new form Sudoku
     */
    private static int score = 0;
    private String username;
    private int level;
    private JTextField[][] numFields = new JTextField[9][9];
    private int[][] keyList = new int[9][9]; // -1 for fields to fill by user & 0 for others
    private int[][] copyarray = new int[9][9];
    private int[][] userarray = new int[9][9];
    private int[][] threeInThree = new int[3][3];

    public Sudoku(String username, int level) {

        this.username = username;
        this.level = level;
        initComponents();
        copyArray(); //copy enum's array to copyarray
        sudokuFields(); //initialize JTF and designJTextFields them
        designJTextFields(); //design of jTextField color, size etc.
        fillField(); // set copyarray to JTF in JFrame
        userSolution(); //check what yser did
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        options = new javax.swing.JPanel();
        timerlabel = new javax.swing.JLabel();
        scorelabel = new javax.swing.JLabel();
        board = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        option = new javax.swing.JPanel();
        menu = new javax.swing.JLabel();
        finish = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        game = new javax.swing.JMenu();
        newgame = new javax.swing.JMenuItem();
        help = new javax.swing.JMenu();
        checkforupdates = new javax.swing.JMenuItem();
        about = new javax.swing.JMenuItem();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sudoku");
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(204, 255, 255));
        setLocation(1600, 800);
        setResizable(false);

        options.setBackground(new java.awt.Color(0, 87, 224));
        options.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), null, null));
        options.setPreferredSize(new java.awt.Dimension(4, 100));

        timerlabel.setBackground(new java.awt.Color(204, 153, 255));
        timerlabel.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        timerlabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timerlabel.setText("Timer");
        timerlabel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(0, 0, 0), null, null));

        scorelabel.setBackground(new java.awt.Color(204, 153, 255));
        scorelabel.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        scorelabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        scorelabel.setText("Score");
        scorelabel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.black, java.awt.Color.black, java.awt.Color.black));

        javax.swing.GroupLayout optionsLayout = new javax.swing.GroupLayout(options);
        options.setLayout(optionsLayout);
        optionsLayout.setHorizontalGroup(
            optionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(timerlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(scorelabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        optionsLayout.setVerticalGroup(
            optionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, optionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(optionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(timerlabel, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE)
                    .addComponent(scorelabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        board.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), null, new java.awt.Color(0, 0, 0)));
        board.setToolTipText("");

        javax.swing.GroupLayout boardLayout = new javax.swing.GroupLayout(board);
        board.setLayout(boardLayout);
        boardLayout.setHorizontalGroup(
            boardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 447, Short.MAX_VALUE)
        );
        boardLayout.setVerticalGroup(
            boardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 450, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 140, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 140, Short.MAX_VALUE)
        );

        option.setBackground(new java.awt.Color(255, 70, 65));
        option.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        menu.setBackground(new java.awt.Color(204, 153, 255));
        menu.setFont(new java.awt.Font("Forte", 0, 18)); // NOI18N
        menu.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        menu.setText("MENU");
        menu.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.black, java.awt.Color.black, java.awt.Color.black));

        finish.setBackground(new java.awt.Color(204, 153, 255));
        finish.setText("Finish");
        finish.setToolTipText("See your result");
        finish.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        finish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout optionLayout = new javax.swing.GroupLayout(option);
        option.setLayout(optionLayout);
        optionLayout.setHorizontalGroup(
            optionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(optionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(menu, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                    .addComponent(finish, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        optionLayout.setVerticalGroup(
            optionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(menu, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(181, 181, 181)
                .addComponent(finish, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        game.setText("Game");

        newgame.setText("New");
        newgame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newgameActionPerformed(evt);
            }
        });
        game.add(newgame);
        newgame.getAccessibleContext().setAccessibleName(" New");

        jMenuBar1.add(game);

        help.setText("Help");

        checkforupdates.setLabel("Check for Updates...");
        help.add(checkforupdates);

        about.setText("About");
        about.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutActionPerformed(evt);
            }
        });
        help.add(about);

        jMenuBar1.add(help);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(board, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(options, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(option, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(140, 140, 140)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(362, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(33, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(option, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(options, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(board, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(24, 24, 24))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(207, 207, 207)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(264, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void aboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, "Designed by\n Yalda Mohasseli \n\t\t&\nSaeede MohammadZade.\n December 2018", "About", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_aboutActionPerformed

    private void finishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishActionPerformed
        // TODO add your handling code here:
        getArrayFromFields();
    }//GEN-LAST:event_finishActionPerformed

    private void newgameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newgameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newgameActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem about;
    private javax.swing.JPanel board;
    private javax.swing.JMenuItem checkforupdates;
    private javax.swing.JButton finish;
    private javax.swing.JMenu game;
    private javax.swing.JMenu help;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel menu;
    private javax.swing.JMenuItem newgame;
    private javax.swing.JPanel option;
    private javax.swing.JPanel options;
    private javax.swing.JLabel scorelabel;
    private javax.swing.JLabel timerlabel;
    // End of variables declaration//GEN-END:variables

    /**
     * We can set an String array of enumeration elements' name, And after that
     * by random, select one of enumeration... But how we can cast String to
     * enumeration.. ?!?! We can use "e.getSource" and check equalation between
     * element of String array and e.getSource Write an action performed method
     * and set switch case for enumeration elements. Then in each case, get its
     * array and then copy it in copyarray
     */
    private void copyArray() {
        copyarray = MySudoku.ONE.getSudokuArray();
    }

    private void sudokuFields() {

        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                numFields[i][j] = new JTextField();
                numFields[i][j].setBounds(j * 50, i * 50, 50, 50);
                numFields[i][j].setVisible(true);
                numFields[i][j].setToolTipText("Enter number.");
                numFields[i][j].setFont(new java.awt.Font("Times New Roamn", 0, 32));
                numFields[i][j].setHorizontalAlignment(javax.swing.JTextField.CENTER);
                numFields[i][j].setBackground(Color.ORANGE);
                board.add(numFields[i][j]);
            }
        }
    }

    private void designJTextFields() {

        for (int i = 0; i < numFields.length; i++) {
            for (int j = 0; j < numFields[i].length; j++) {
                if ((j == 3) || (j == 4) || (j == 5) || (i == 3) || (i == 4) || (i == 5)) {
                    continue;
                }
                numFields[i][j].setBackground(new java.awt.Color(255, 239, 62));
            }
        }
        for (int i = 3; i < 6; i++) {
            for (int j = 3; j < 6; j++) {
                numFields[i][j].setBackground(new java.awt.Color(255, 239, 62));
            }
        }
    }

    private void fillField() {
        for (int i = 0; i < numFields.length; i++) {
            for (int j = 0; j < numFields[i].length; j++) {

                try {
                    if (copyarray[i][j] != 0) {
                        numFields[i][j].setText(Integer.toString(copyarray[i][j]));
                        //System.out.println("" + k + " " + j + "\n" + copyarray[k][j]);
                        Integer.parseInt(numFields[i][j].getText());
                        numFields[i][j].setEditable(false);

                    } else {
                        numFields[i][j].setText("");
                    }

                } catch (NumberFormatException nfe) {
                    numFields[i][j].setText("");
                }
            }
        }
    }

    private void userSolution() {

        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                final int m = i, n = j;
                numFields[i][j].addKeyListener(new KeyAdapter() {
                    @Override
                    public void keyTyped(KeyEvent e) {
                        if ((numFields[m][n].getText().length() >= 1) || !Character.isDigit(e.getKeyChar())) // limit to enter more than 1 number
                        {
                            e.consume();
                        }
                    }
                });
            }
        }
    }

    private void getArrayFromFields() {

        boolean result = false;
        for (int i = 0; i < userarray.length; i++) {
            for (int j = 0; j < userarray[i].length; j++) {
                try {
                    int number = Integer.parseInt(numFields[i][j].getText());
                    if (number != 0) {
                        userarray[i][j] = number;
                    } else if (numFields[i][j].equals("") || number == 0) {
                        userarray[i][j] = 0;
                    }
                } catch (NumberFormatException nfe) {
                    // Do Nothing !
                }
            }
        }
        result = caculateResult();

        if (result) {
            scorelabel.setText(Integer.toString(score));
            System.out.println("true");
            new WinnerFrame(username, score).setVisible(true);
            this.setVisible(false);
            getStuck();
        } else {
            System.out.println("false");
            new LoserFrame(username, score).setVisible(true);
            this.setVisible(false);
            getStuck();;
        }
    }

    private boolean caculateResult() {

        boolean rowCheck = false;
        boolean columnCheck = false;
        boolean threeInthreeCheck = false;
        boolean subResult = false;
        int element = 0;

        for (int row = 0; row < userarray.length; row++) {
            for (int column = 0; column < userarray[row].length; column++) {

                element = userarray[row][column];
                rowCheck = isInRow(row, column, element);
                columnCheck = isInColumn(row, column, element);
                threeInthreeCheck = isInThreeInThree(row, column, element);

                if (rowCheck && columnCheck && threeInthreeCheck) {
                    score = score + 10;
                    subResult = true;
                } else {
                    score = score - 15;
                    subResult = false;
                }
            }
        }

        return subResult;
    }

    private boolean isInRow(int row, int column, int element) {

        for (int k = 0; k < userarray[row].length; k++) {
            if ((element == userarray[row][k]) && (column != k)) {
                return false;
            }
        }
        return true;
    }

    private boolean isInColumn(int row, int column, int element) {

        for (int k = 0; k < userarray[column].length; k++) {
            if ((element == userarray[k][column]) && (k != row)) {
                return false;
            }
        }
        return true;
    }

    private boolean isInThreeInThree(int row, int column, int element) {

        int r = row - row % 3;
        int c = column - column % 3;
        int[][] threeInThree = new int[3][3];

        for (int i = r; i < r + 3; i++) {
            for (int j = c; j < c + 3; j++) {
                threeInThree[i % 3][j % 3] = userarray[i][j];
            }
        }
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (element == threeInThree[i][j]) {
                    return false;
                }
            }
        }
        return true;
    }

    private void getStuck() {

        for (int i = 0; i < userarray.length; i++) {
            for (int j = 0; j < userarray.length; j++) {
                numFields[i][j].setEditable(false);
            }
        }
    }

    private void setZeroTOFields() {

        int range = 8, row, column;
        for (int i = 0; i < 10; i++) {
            row = (int) (Math.random() * range);
            column = (int) (Math.random() * range);
            
            /**
             * in our copyarray element [row][column] and element [8 - row][8 - column] must be 0
             */

        }
    }
}
